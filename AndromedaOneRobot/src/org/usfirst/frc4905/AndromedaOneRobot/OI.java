// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.
package org.usfirst.frc4905.AndromedaOneRobot;

import org.usfirst.frc4905.AndromedaOneRobot.commands.*;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.buttons.*;

/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI
{
	// // CREATING BUTTONS
	// One type of button is a joystick button which is any button on a
	// joystick.
	// You create one by telling it which joystick it's on and which button
	// number it is.
	// Joystick stick = new Joystick(port);
	// Button button = new JoystickButton(stick, buttonNumber);
	// Another type of button you can create is a DigitalIOButton, which is
	// a button or switch hooked up to the cypress module. These are useful if
	// you want to build a customized operator interface.
	// Button button = new DigitalIOButton(1);
	// There are a few additional built in buttons you can use. Additionally,
	// by subclassing Button you can create custom triggers and bind those to
	// commands the same as any other Button.
	// // TRIGGERING COMMANDS WITH BUTTONS
	// Once you have a button, it's trivial to bind it to a button in one of
	// three ways:
	// Start the command when the button is pressed and let it run the command
	// until it is finished as determined by it's isFinished method.
	// button.whenPressed(new ExampleCommand());
	// Run the command while the button is being held down and interrupt it once
	// the button is released.
	// button.whileHeld(new ExampleCommand());
	// Start the command when the button is released and let it run the command
	// until it is finished as determined by it's isFinished method.
	// button.whenReleased(new ExampleCommand());
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	public JoystickButton y_Button;
	public JoystickButton x_Button;
	public JoystickButton rb_Button;
	public JoystickButton lb_Button;
	public JoystickButton r3_Button;
	public JoystickButton b_Button;
	public Joystick gamePad_F310_Baller;
	public JoystickButton l3_Driver;
	public Joystick gamePad_F310_Driver;

	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	public OI()
	{
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
		gamePad_F310_Driver = new Joystick(1);

		l3_Driver = new JoystickButton(gamePad_F310_Driver, 9);
		l3_Driver.whenPressed(new AboutFace());
		gamePad_F310_Baller = new Joystick(2);

		b_Button = new JoystickButton(gamePad_F310_Baller, 2);
		b_Button.whenPressed(new Stow());
		r3_Button = new JoystickButton(gamePad_F310_Baller, 10);
		r3_Button.whenPressed(new ThrowBall());
		lb_Button = new JoystickButton(gamePad_F310_Baller, 5);
		lb_Button.whileHeld(new MoveArmsOut());
		rb_Button = new JoystickButton(gamePad_F310_Baller, 6);
		rb_Button.whileHeld(new MoveArmsIn());
		x_Button = new JoystickButton(gamePad_F310_Baller, 3);
		x_Button.whenPressed(new Level());
		y_Button = new JoystickButton(gamePad_F310_Baller, 4);
		y_Button.whileHeld(new LiftBall());

		// SmartDashboard Buttons
		SmartDashboard.putData("myArcadeDrive", new myArcadeDrive());
		SmartDashboard.putData("Autonomous Command", new AutonomousCommand());
		SmartDashboard.putData("Stow", new Stow());
		SmartDashboard.putData("Level", new Level());
		SmartDashboard.putData("MovePlatform", new MovePlatform());
		SmartDashboard.putData("MoveArmsIn", new MoveArmsIn());
		SmartDashboard.putData("MoveArmsOut", new MoveArmsOut());
		SmartDashboard.putData("ThrowBall", new ThrowBall());
		SmartDashboard.putData("AboutFace", new AboutFace());
		SmartDashboard.putData("LiftBall", new LiftBall());
		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
	}

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
	public Joystick getGamePad_F310_Baller()
	{
		return gamePad_F310_Baller;
	}

	public Joystick getGamePad_F310_Driver()
	{
		return gamePad_F310_Driver;
	}
	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
}
